package com.ticketsystem.notification.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class NotificationTemplateAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNotificationTemplateAllPropertiesEquals(NotificationTemplate expected, NotificationTemplate actual) {
        assertNotificationTemplateAutoGeneratedPropertiesEquals(expected, actual);
        assertNotificationTemplateAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNotificationTemplateAllUpdatablePropertiesEquals(NotificationTemplate expected, NotificationTemplate actual) {
        assertNotificationTemplateUpdatableFieldsEquals(expected, actual);
        assertNotificationTemplateUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNotificationTemplateAutoGeneratedPropertiesEquals(NotificationTemplate expected, NotificationTemplate actual) {
        assertThat(actual)
            .as("Verify NotificationTemplate auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNotificationTemplateUpdatableFieldsEquals(NotificationTemplate expected, NotificationTemplate actual) {
        assertThat(actual)
            .as("Verify NotificationTemplate relevant properties")
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getLanguage()).as("check language").isEqualTo(expected.getLanguage()))
            .satisfies(a -> assertThat(a.getSubject()).as("check subject").isEqualTo(expected.getSubject()))
            .satisfies(a -> assertThat(a.getEmailBody()).as("check emailBody").isEqualTo(expected.getEmailBody()))
            .satisfies(a -> assertThat(a.getSmsTemplate()).as("check smsTemplate").isEqualTo(expected.getSmsTemplate()))
            .satisfies(a -> assertThat(a.getPushTemplate()).as("check pushTemplate").isEqualTo(expected.getPushTemplate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNotificationTemplateUpdatableRelationshipsEquals(NotificationTemplate expected, NotificationTemplate actual) {
        // empty method
    }
}
